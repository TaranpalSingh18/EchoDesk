Below is the revised API spec for your browser-extension flow, now with **Use Case** descriptions for each endpoint.

| HTTP Method | Path                                  | Request Payload                                                                                                               | Sample Response Payload                                                                                                                                                                       | Use Case                                                                     |                                                           |                                                          |
| ----------- | ------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------- | --------------------------------------------------------- | -------------------------------------------------------- |
| **POST**    | `/auth/register`                      | `{ "username": "jdoe", "email": "jdoe@example.com", "password": "s3cr3t" }`                                                   | `{ "id": "user_123", "username": "jdoe", "email": "jdoe@example.com" }`                                                                                                                       | New user signs up for the extension.                                         |                                                           |                                                          |
| **POST**    | `/auth/login`                         | `{ "email": "jdoe@example.com", "password": "s3cr3t" }`                                                                       | `{ "access_token": "<jwt>", "token_type": "bearer" }`                                                                                                                                         | User logs in and receives JWT for subsequent calls.                          |                                                           |                                                          |
| **GET**     | `/auth/me`                            | — (JWT in header)                                                                                                             | `{ "id":"user_123","username":"jdoe","email":"jdoe@example.com" }`                                                                                                                            | Fetch current user profile for extension settings.                           |                                                           |                                                          |
| **POST**    | `/users/{user_id}/email-verification` | —                                                                                                                             | `{ "message": "Verification email sent." }`                                                                                                                                                   | Trigger sending a verification email to confirm user’s address.              |                                                           |                                                          |
| **POST**    | `/sessions/`                          | `{ "meeting_url": "https://meet.google.com/...", "start_time": "2025-08-05T10:00:00Z" }`                                      | `{ "session_id":"sess_789","meeting_url":"...","status":"recording" }`                                                                                                                        | Extension starts a new capture session when user clicks “Start Recording.”   |                                                           |                                                          |
| **GET**     | `/sessions/`                          | — (optional \`?status=recording                                                                                               | processing                                                                                                                                                                                    | completed\`)                                                                 | `[ { "session_id":"sess_789","status":"recording" }, … ]` | List all past and active sessions for dashboard display. |
| **GET**     | `/sessions/{session_id}`              | —                                                                                                                             | `{ "session_id":"sess_789","meeting_url":"...","status":"recording","start_time":"..." }`                                                                                                     | Retrieve session details (used by the extension status UI).                  |                                                           |                                                          |
| **POST**    | `/audio/stream` (WebSocket)           | Stream raw PCM audio chunks                                                                                                   | N/A                                                                                                                                                                                           | Extension streams live audio to backend for ASR and diarization.             |                                                           |                                                          |
| **POST**    | `/sessions/{session_id}/complete`     | —                                                                                                                             | `{ "summary":["..."],"tasks":[{"id":1,"title":"...","assignee_user_id":"user_123","due_date":"2025-08-07"}],"tickets":[{"task_id":1,"platform":"asana","url":"https://app.asana.com/..."}] }` | User or extension signals session end; triggers full pipeline run.           |                                                           |                                                          |
| **POST**    | `/transcripts/`                       | `{ "session_id":"sess_789", "segments":[{ "start":0.0,"end":2.5,"text":"Hello team" }] }`                                     | `{ "message": "Transcripts stored." }`                                                                                                                                                        | Backend stores interim ASR results (called after each chunk or batch).       |                                                           |                                                          |
| **GET**     | `/transcripts/{session_id}`           | —                                                                                                                             | `{ "session_id":"sess_789","segments":[…] }`                                                                                                                                                  | Fetch complete transcript for review or UI display.                          |                                                           |                                                          |
| **POST**    | `/diarization/`                       | `{ "session_id":"sess_789", "audio_url":"/audio/chunk.wav" }`                                                                 | `{ "message": "Diarization complete." }`                                                                                                                                                      | Trigger speaker labeling on stored audio.                                    |                                                           |                                                          |
| **GET**     | `/diarization/{session_id}`           | —                                                                                                                             | `{ "session_id":"sess_789","speakers":[{"start":0.0,"end":2.5,"speaker":"Speaker_1"}]} `                                                                                                      | Retrieve speaker segments to annotate transcript in UI.                      |                                                           |                                                          |
| **POST**    | `/summaries/`                         | `{ "session_id":"sess_789", "window_text":"..." }`                                                                            | `{ "bullets":["Discussed roadmap","Assigned follow-ups"] }`                                                                                                                                   | Request summary bullets for a specific text window (used for live updates).  |                                                           |                                                          |
| **GET**     | `/summaries/{session_id}`             | —                                                                                                                             | `{ "session_id":"sess_789","bullets":[…] }`                                                                                                                                                   | Fetch all accumulated summary bullets after pipeline.                        |                                                           |                                                          |
| **POST**    | `/tasks/`                             | `{ "session_id":"sess_789","title":"Review deck","description":"...","assignee_user_id":"user_123","due_date":"2025-08-07" }` | `{ "id":1,"session_id":"sess_789","title":"Review deck","assignee_user_id":"user_123","due_date":"2025-08-07","status":"pending" }`                                                           | Create an individual task/action item (used by pipeline or manual creation). |                                                           |                                                          |
| **GET**     | `/tasks/`                             | — (optional `?session_id=&status=&assignee=`)                                                                                 | `[ { "id":1,… },… ]`                                                                                                                                                                          | List tasks for UI overview and filtering.                                    |                                                           |                                                          |
| **GET**     | `/tasks/{task_id}`                    | —                                                                                                                             | `{ "id":1,"session_id":"sess_789","title":"Review deck","description":"...","assignee_user_id":"user_123","due_date":"2025-08-07","external_url":"https://app.asana.com/..." }`               | Retrieve full task details, including external ticket link.                  |                                                           |                                                          |
| **PATCH**   | `/tasks/{task_id}`                    | `{ "status":"completed" }`                                                                                                    | `{ "id":1,"status":"completed" }`                                                                                                                                                             | Update task status or fields (used by users marking tasks done).             |                                                           |                                                          |
| **DELETE**  | `/tasks/{task_id}`                    | —                                                                                                                             | `{ "message": "Task deleted." }`                                                                                                                                                              | Remove a task (in case of false positives or cancellations).                 |                                                           |                                                          |
| **POST**    | `/integrations/email`                 | `{ "task_id":1, "template_id":"task_assign" }`                                                                                | `{ "message": "Email sent to assignee." }`                                                                                                                                                    | Send task assignment email using predefined template.                        |                                                           |                                                          |
| **POST**    | `/integrations/asana`                 | `{ "task_id":1, "workspace_id":"ws_789","project_id":"proj_456","assignee_email":"jdoe@example.com" }`                        | `{ "task_id":1,"platform":"asana","url":"https://app.asana.com/..." }`                                                                                                                        | Create Asana task for the assignee and store returned URL.                   |                                                           |                                                          |
| **POST**    | `/integrations/jira`                  | `{ "task_id":1, "project_key":"PROJ","issue_type":"Task","assignee_email":"jdoe@example.com" }`                               | `{ "task_id":1,"platform":"jira","url":"https://jira.example.com/browse/PROJ-123" }`                                                                                                          | Push a Jira issue for each task against the configured project.              |                                                           |                                                          |
| **POST**    | `/notifications/slack`                | `{ "channel":"#general","message":"You have 2 new tasks assigned." }`                                                         | `{ "message": "Notification posted." }`                                                                                                                                                       | Broadcast notifications to teams or channels upon task creation.             |                                                           |                                                          |
| **GET**     | `/search?q=keyword`                   | —                                                                                                                             | `{ "results":[{"type":"transcript","text":"..."},{"type":"task","title":"..."}] }`                                                                                                            | Search across all data (transcripts, summaries, tasks) for keyword matches.  |                                                           |                                                          |
| **POST**    | `/export/markdown`                    | `{ "session_id":"sess_789" }`                                                                                                 | `{ "file_path":"/reports/sess_789.md" }`                                                                                                                                                      | Generate a self-contained Markdown report of the entire session.             |                                                           |                                                          |
| **POST**    | `/export/pdf`                         | `{ "session_id":"sess_789" }`                                                                                                 | `{ "file_path":"/reports/sess_789.pdf" }`                                                                                                                                                     | Convert the Markdown report to a PDF for download or sharing.                |                                                           |                                                          |
| **POST**    | `/export/google-doc`                  | `{ "session_id":"sess_789","folder_id":"folder_123" }`                                                                        | `{ "doc_url":"https://docs.google.com/document/d/abcd" }`                                                                                                                                     | Upload the final report to Google Docs for collaborative access.             |                                                           |                                                          |

**Notes:**

* All endpoints (except `/auth/*`) require `Authorization: Bearer <JWT>`.
* The extension initiates `/sessions/` and streams audio to `/audio/stream`.
* On clicking stop, the extension calls `/sessions/{session_id}/complete` to run the entire pipeline automatically.
* Use FastAPI background tasks or Celery for long-running operations.
* Ensure idempotency of `/sessions/{session_id}/complete` to avoid duplicate tickets/emails.
